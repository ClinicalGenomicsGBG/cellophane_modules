---
name: Run pytest

permissions:
  checks: write
  pull-requests: write

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      publish-results:
        description: 'Publish test results'
        required: false
        type: boolean
        default: false
      pr-head-sha:
        description: The head sha of the pull request
        type: string
        required: true
      module:
        description: The module to test
        type: string
        required: true
      path:
        description: The working directory (must contain pyproject.toml)
        type: string
        required: true
      version:
        description: The version of the module to test
        type: string
        required: true
      cellophane-repo:
        description: The repository of cellophane to use
        type: string
        required: true
      cellophane-tag:
        description: The version of cellophane to use
        type: string
        required: true
      ignore-fail:
        description: Ignore test failures
        type: boolean
        required: false
        default: false

env:
  support_json: ${{ inputs.module }}-${{ inputs.cellophane-tag }}.support.json

jobs:
  pytest:
    name: Run pytest (${{ inputs.cellophane-tag }})
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    outputs:
      result: ${{ steps.pytest.outputs.result }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.pr-head-sha }}
    - uses: eifinger/setup-rye@v4
      with:
        working-directory: ${{ inputs.path }}
    - name: install-cellophane
      working-directory: ${{ inputs.path  }}
      run: |
        rye sync
        rye run uv pip install git+https://github.com/${{ inputs.cellophane-repo }}.git@${{ inputs.cellophane-tag }} --force-reinstall
    - name: pytest
      id: pytest
      timeout-minutes: 1
      env:
        FORCE_COLOR: false
        COLUMNS: 500
      working-directory: ${{ inputs.path }}
      run: |
        set +e
        rye run pytest --junit-xml=pytest.xml
        code=$?
        if [[ "$code" == "0" ]]; then
          echo ::notice::Tests passed for ${{ inputs.module }} ${{ inputs.version }} with cellophane ${{ inputs.cellophane-tag }}
          echo '"${{ inputs.cellophane-tag }}"' > ${{ env.support_json}}
          echo result=sucess | tee -a "$GITHUB_OUTPUT"
        elif [[ '${{ inputs.ignore-fail }}' == 'true' ]]; then
          echo ::notice::Ignoring test failures
          echo '"${{ inputs.cellophane-tag }}"' > ${{ env.support_json}}
          echo result=failure | tee -a "$GITHUB_OUTPUT"
        elif [[ "$code" == "1" ]]; then
          echo ::warning::Tests failed for ${{ inputs.module }} ${{ inputs.version }} with cellophane ${{ inputs.cellophane-tag }}
          echo result=failure | tee -a "$GITHUB_OUTPUT"
        elif [[ "$code" == "5" ]]; then
          echo ::warning::No tests found for ${{ inputs.module }}
          echo result=failure | tee -a "$GITHUB_OUTPUT"
        else
          echo ::error::Unexpected pytest exit code $code
          echo result=failure | tee -a "$GITHUB_OUTPUT"
        fi
        exit $code

    - uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{ (!cancelled()) && inputs.publish-results }}
      with:
        files: ${{ inputs.path }}/pytest.xml
        commit: ${{ inputs.pr-head-sha }}

    - uses: actions/upload-artifact@v4
      if: ${{ (!cancelled()) && (steps.pytest.outputs.result != 'failure'  || inputs.ignore-fail) }}
      with:
        name: ${{ env.support_json}}
        path: ${{ env.support_json}}
        retention-days: 1
